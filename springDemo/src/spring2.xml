<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<beans>

	<!--  autowire can work in three ways 
		1) byName: It matches the name in the class with any of the name in the beans list 
		2) byType: It matches the type of variable with the type of beans and assigns it. 
					It works only if only attribute of that type exists in the class and beans list
	    2) constructor: It is same as byName instead of setter injection it uses constructor injection 
		-->	
		
		<!-- we can say abstract=true to inform not to create the bean for the parentTriangle, others can make use of this  -->
	<bean id="parentTriangle" class="org.vikas.Triangle" abstract="true">
	<property name="pointA" ref="pointA"></property>
	</bean>
	
		<!-- scope as prototype, so it creates new object bean for every request.Default is singleton -->
	 <bean id="triangle" class="org.vikas.Triangle" scope="prototype" >
	 	 	<property name="pointB" ref="pointB"/>	 	 	
	 </bean>
		
	
		
	 <bean id="triangle1" class="org.vikas.Triangle" parent="parentTriangle" >
	 	 	<property name="pointB" ref="pointB"/>
	 	 	
	 	 	
	 </bean>
	 
	 <!-- inherit the bean properties and override if it matches the name or id  -->
	 <bean id="triangle2" class="org.vikas.Triangle"  parent="parentTriangle" 	>
	 	 	<property name="pointB" ref="pointB"/>
	 		<property name="pointC" ref="pointC"/>
	 
	 </bean>
	
	<bean id="triangles11" class="org.vikas.Triangle" scope="prototype" >
	 	 	<property name="points">
	 	 		<list>
	 	 			<ref bean="pointA"></ref>
	 	 		</list>
	 	 	</property>	 	 	
	 </bean>
	
	<!--  We generally override the collections if we say merge=true for the list  it gonna merge both the collections -->
	 <bean id="triangle21" class="org.vikas.Triangle" scope="prototype" parent="triangle11" >
	 	 	<property name="points">
	 	 		<list merge="true">
	 	 			<ref bean="pointB"></ref>
	 	 		</list>
	 	 	</property>	 	 	
	 </bean>
	 
	 
 	<bean id="pointA" class="org.vikas.Point" >
 		<property name="x" value="${pointA.pointX}"></property>
 		<property name="y" value="${pointA.pointY}"></property>
 	</bean>

 	<bean id="pointB" class="org.vikas.Point" >
 		<property name="x" value="2"></property>
 		<property name="y" value="-2"></property>
 	</bean>
 	<bean id="pointC" class="org.vikas.Point" >
 		<property name="x" value="1"></property>
 		<property name="y" value="-2"></property>
 	</bean>
 	
 	<!-- Spring detects the PostProcessir bean class on its own based in the implements made to the class. No need of addition attributes -->
 	<bean class="org.vikas.DisplayBeanNamePostProcessor"/>
 	<!--  Same as the bean post processor-->
 	<bean class="org.vikas.myBeanFactoryPP"/>
 	
 	
 	<!-- This would look at the properties file and replace the ${} placeholders in the current spring.xml file 
 		 This gets executed before bean factory getting executed. So Bean factory sees after substitute values. 
 		 It assumes the properties file is in the same folder  -->
 	<bean class="org.springframwork.beans.factory.config.PropertyPlaceholderConfigurer" >
 			<property name="locations" value="pointsconfig.properties"></property>
 	</bean>
 	
 	
 	
 	<!-- Alias tag can be used to access the bean with multiple names  --> 
</beans>